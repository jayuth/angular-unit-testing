Chapter 2:
Angular Unit Testing
2 types of unit testing in Angular
-Isolated test - a single unit/class
-Intergartion test - create and test in a context of Angular module so we can test a class with its template
--shallow - test a single class 
--deep - test both parent and child components 

Automated testing
-unit testing - a single unit of code, while in development, unit = single class such as a user component
-end to end testing - test against live running app, done through manipulating and automating a browser to do things such as click a button
-integration or functional testing - in between, this part of this app works with another part of tha app suchas user component and user service

Mocking 
-since a component class usually depends on other classes such as a user component depends on the user service class to be able to function
but our focus is a unit test. we should test only a use class so we mock a user service to do whatever we want 

Types of Mocks
-dummies
-stubs
-spies
-true mocks

Tools for testing
Karma - test runner - execute our code in a broswer
Jasmine - create a mock

this.heroes = this.heroes.filter(h => h !== hero);
-keep hero that is not equal to the 'passed-in hero' parameter

if your method returns an observable, then use mock service

-duplicating code is ok in testing becuase we want to tell the story

Chapter 4: shallow integration tests 
-test both component and template using TestBed 
--create a special module for etsting purposes

ComponentFixure - a wrapper for a component, allows us to create an instance of that component and allows us to access instance properties 

NO_ERRORS_SCHEMA
-hide errors in our template e.g. mispell <buttons> instead of <button>. Karma will not be aware of this 
-ignore unknown attributes and elements in the html but using this will hide other errors such as we wion't get notified if we misuse directive 

***important - check if the template requires bindings such as interpolation e.g. {{ hero.name }}. 
In our test, we need to let Angular know about that using fixure.detectChanges(). 
Otherwise, we will get an empty string of that property

Scenario:
Before implementing detectChanges():
-we got an error becuase the testing module doesn't know about the routerLink directive in the template
-we got an empty string because we didn't tell Angular to actually implement the bindings

-nativeElement - exposes DOM API
-debugElement - points to the root of our template

debugElement is similar to fixure.componentInstance. debugElement focuses on DOM elements allowing us to access and debug elements by its id or tags
fixure.componentInstance works with the component class allowing us to access instance properties

-More complex shallow integration test and complex component
e.g. heroes.component.ts template has a child directive and service dependency

TestBed:  
In the intergation test, if we test a component method that requires us to touch the teamplate and perform
data binding or the template includes a child component, we need to implement TestBed.

Scenario:
Before implementing a mock child component in in heroes.component.shaloow.spec.ts, we saw the following error:
-"Can't bind to 'hero' since it isn't a known property of 'app-hero'"
-this is because <app-hero> is not part of a module. 
-in the heroes html template, we have <app-hero> tag. This tag refers to a child component class
-To fix this, we have to create a fake child component and import it to the test module

**how to read Karma error:
-Expected 3 to be 2. 3 is an incorrect value

  

